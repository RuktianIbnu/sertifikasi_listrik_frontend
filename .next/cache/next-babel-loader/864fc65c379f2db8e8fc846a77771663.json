{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\project\\\\sertifikasi_listrik_frontend\\\\pages\\\\index.js\";\nimport Head from \"next/head\";\nimport Router from \"next/router\";\nimport { Container, Row, Col, Form, Button, Image } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useState, useEffect } from \"react\";\nimport { axiosGeneral } from \"../helpers/global\";\nimport { setAccessToken, setUser, setLoading } from \"../store/actionCreator\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport { useToasts } from \"react-toast-notifications\";\nconst FormSchema = Yup.object().shape({\n  password: Yup.string().required(\"* Password tidak boleh kosong\")\n});\nconst FormSchemaPassword = Yup.object().shape({\n  password: Yup.string().required(\"* Password tidak boleh kosong\"),\n  ulangi_password: Yup.string().required(\"*Ulangi Password tidak boleh kosong\"),\n  ulangi_password: Yup.string().oneOf([Yup.ref(\"password\"), null], \"Password tidak sama!\")\n});\nexport default function Home() {\n  const dispatch = useDispatch();\n  const accessToken = useSelector(state => state.accessToken);\n  const {\n    addToast\n  } = useToasts();\n  useEffect(() => {\n    if (accessToken) {\n      Router.replace(\"/dashboard\");\n    }\n\n    const url = new URLSearchParams(location.search);\n\n    if (url.get(\"token\") != null) {\n      setTokenVerify(url.get(\"token\").toString());\n      setIsNewPassword(true);\n    }\n  }, []);\n\n  const doLogin = async values => {\n    try {\n      dispatch(setLoading(true));\n      const body = {\n        email: values.email,\n        password: values.password,\n        app_id: \"admin-panel\"\n      };\n      const response = await axiosGeneral.post(\"/login\", body);\n      const {\n        status,\n        data\n      } = response; // console.log(data);\n\n      if (status === 200) {\n        setTokenTemp(data.data.temp_token);\n        dispatch(setLoading(false));\n        setIsOtp(true);\n        setOTP(\"\");\n      }\n    } catch (error) {\n      dispatch(setLoading(false));\n      addToast(error.response.data.message, {\n        appearance: \"error\"\n      });\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validationSchema: FormSchema,\n    onSubmit: values => doLogin(values)\n  });\n  const formikPassword = useFormik({\n    initialValues: {\n      password: \"\",\n      ulangi_password: \"\"\n    },\n    validationSchema: FormSchemaPassword,\n    enableReinitialize: false,\n    onSubmit: values => doChangePassword(values)\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Login - LISTRIK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-green-700\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Listrik\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-semibold\",\n        children: \"Masuk\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        method: \"POST\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mt-5\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            className: \"custom-input\",\n            type: \"text\",\n            autoComplete: \"false\",\n            name: \"email\",\n            onChange: formik.handleChange,\n            value: formik.values.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), formik.errors.email && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-500\",\n            children: formik.errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            className: \"custom-input\",\n            type: \"password\",\n            autoComplete: \"true\",\n            name: \"password\",\n            onChange: formik.handleChange,\n            value: formik.values.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), formik.errors.password && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs text-red-500\",\n            children: formik.errors.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: formik.isSubmitting,\n          variant: \"warning\",\n          type: \"submit\",\n          className: \"mt-4\",\n          block: true,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["C:/project/sertifikasi_listrik_frontend/pages/index.js"],"names":["Head","Router","Container","Row","Col","Form","Button","Image","useSelector","useDispatch","useState","useEffect","axiosGeneral","setAccessToken","setUser","setLoading","Yup","useFormik","useToasts","FormSchema","object","shape","password","string","required","FormSchemaPassword","ulangi_password","oneOf","ref","Home","dispatch","accessToken","state","addToast","replace","url","URLSearchParams","location","search","get","setTokenVerify","toString","setIsNewPassword","doLogin","values","body","email","app_id","response","post","status","data","setTokenTemp","temp_token","setIsOtp","setOTP","error","message","appearance","formik","initialValues","validationSchema","onSubmit","formikPassword","enableReinitialize","doChangePassword","handleSubmit","handleChange","errors","isSubmitting"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,MAApC,EAA4CC,KAA5C,QAAyD,iBAAzD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,UAAlC,QAAoD,wBAApD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,SAAT,QAA0B,2BAA1B;AAEA,MAAMC,UAAU,GAAGH,GAAG,CAACI,MAAJ,GAAaC,KAAb,CAAmB;AACpCC,EAAAA,QAAQ,EAAEN,GAAG,CAACO,MAAJ,GAAaC,QAAb,CAAsB,+BAAtB;AAD0B,CAAnB,CAAnB;AAIA,MAAMC,kBAAkB,GAAGT,GAAG,CAACI,MAAJ,GAAaC,KAAb,CAAmB;AAC5CC,EAAAA,QAAQ,EAAEN,GAAG,CAACO,MAAJ,GAAaC,QAAb,CAAsB,+BAAtB,CADkC;AAE5CE,EAAAA,eAAe,EAAEV,GAAG,CAACO,MAAJ,GAAaC,QAAb,CAAsB,qCAAtB,CAF2B;AAG5CE,EAAAA,eAAe,EAAEV,GAAG,CAACO,MAAJ,GAAaI,KAAb,CACf,CAACX,GAAG,CAACY,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADe,EAEf,sBAFe;AAH2B,CAAnB,CAA3B;AASA,eAAe,SAASC,IAAT,GAAgB;AAC7B,QAAMC,QAAQ,GAAGrB,WAAW,EAA5B;AACA,QAAMsB,WAAW,GAAGvB,WAAW,CAAEwB,KAAD,IAAWA,KAAK,CAACD,WAAlB,CAA/B;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAef,SAAS,EAA9B;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoB,WAAJ,EAAiB;AACf9B,MAAAA,MAAM,CAACiC,OAAP,CAAe,YAAf;AACD;;AAED,UAAMC,GAAG,GAAG,IAAIC,eAAJ,CAAoBC,QAAQ,CAACC,MAA7B,CAAZ;;AACA,QAAIH,GAAG,CAACI,GAAJ,CAAQ,OAAR,KAAoB,IAAxB,EAA8B;AAC5BC,MAAAA,cAAc,CAACL,GAAG,CAACI,GAAJ,CAAQ,OAAR,EAAiBE,QAAjB,EAAD,CAAd;AACAC,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAMC,OAAO,GAAG,MAAOC,MAAP,IAAkB;AAChC,QAAI;AACFd,MAAAA,QAAQ,CAACf,UAAU,CAAC,IAAD,CAAX,CAAR;AACA,YAAM8B,IAAI,GAAG;AACXC,QAAAA,KAAK,EAAEF,MAAM,CAACE,KADH;AAEXxB,QAAAA,QAAQ,EAAEsB,MAAM,CAACtB,QAFN;AAGXyB,QAAAA,MAAM,EAAE;AAHG,OAAb;AAKA,YAAMC,QAAQ,GAAG,MAAMpC,YAAY,CAACqC,IAAb,CAAkB,QAAlB,EAA4BJ,IAA5B,CAAvB;AACA,YAAM;AAAEK,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAmBH,QAAzB,CARE,CASF;;AACA,UAAIE,MAAM,KAAK,GAAf,EAAoB;AAClBE,QAAAA,YAAY,CAACD,IAAI,CAACA,IAAL,CAAUE,UAAX,CAAZ;AACAvB,QAAAA,QAAQ,CAACf,UAAU,CAAC,KAAD,CAAX,CAAR;AACAuC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAC,QAAAA,MAAM,CAAC,EAAD,CAAN;AACD;AACF,KAhBD,CAgBE,OAAOC,KAAP,EAAc;AACd1B,MAAAA,QAAQ,CAACf,UAAU,CAAC,KAAD,CAAX,CAAR;AACAkB,MAAAA,QAAQ,CAACuB,KAAK,CAACR,QAAN,CAAeG,IAAf,CAAoBM,OAArB,EAA8B;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAA9B,CAAR;AACD;AACF,GArBD;;AAuBA,QAAMC,MAAM,GAAG1C,SAAS,CAAC;AACvB2C,IAAAA,aAAa,EAAE;AACbd,MAAAA,KAAK,EAAE,EADM;AAEbxB,MAAAA,QAAQ,EAAE;AAFG,KADQ;AAKvBuC,IAAAA,gBAAgB,EAAE1C,UALK;AAMvB2C,IAAAA,QAAQ,EAAGlB,MAAD,IAAYD,OAAO,CAACC,MAAD;AANN,GAAD,CAAxB;AASA,QAAMmB,cAAc,GAAG9C,SAAS,CAAC;AAC/B2C,IAAAA,aAAa,EAAE;AACbtC,MAAAA,QAAQ,EAAE,EADG;AAEbI,MAAAA,eAAe,EAAE;AAFJ,KADgB;AAK/BmC,IAAAA,gBAAgB,EAAEpC,kBALa;AAM/BuC,IAAAA,kBAAkB,EAAE,KANW;AAO/BF,IAAAA,QAAQ,EAAGlB,MAAD,IAAYqB,gBAAgB,CAACrB,MAAD;AAPP,GAAD,CAAhC;AAUA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAI,QAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAM,QAAA,QAAQ,EAAEe,MAAM,CAACO,YAAvB;AAAqC,QAAA,MAAM,EAAC,MAA5C;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAC,MAAtB;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,SAAS,EAAC,cADZ;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,YAAY,EAAC,OAHf;AAIE,YAAA,IAAI,EAAC,OAJP;AAKE,YAAA,QAAQ,EAAEP,MAAM,CAACQ,YALnB;AAME,YAAA,KAAK,EAAER,MAAM,CAACf,MAAP,CAAcE;AANvB;AAAA;AAAA;AAAA;AAAA,kBAFF,EAUGa,MAAM,CAACS,MAAP,CAActB,KAAd,iBACC;AAAM,YAAA,SAAS,EAAC,sBAAhB;AAAA,sBACGa,MAAM,CAACS,MAAP,CAActB;AADjB;AAAA;AAAA;AAAA;AAAA,kBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAiBE,QAAC,IAAD,CAAM,KAAN;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,OAAO,EAAC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,SAAS,EAAC,cADZ;AAEE,YAAA,IAAI,EAAC,UAFP;AAGE,YAAA,YAAY,EAAC,MAHf;AAIE,YAAA,IAAI,EAAC,UAJP;AAKE,YAAA,QAAQ,EAAEa,MAAM,CAACQ,YALnB;AAME,YAAA,KAAK,EAAER,MAAM,CAACf,MAAP,CAActB;AANvB;AAAA;AAAA;AAAA;AAAA,kBAFF,EAUGqC,MAAM,CAACS,MAAP,CAAc9C,QAAd,iBACC;AAAM,YAAA,SAAS,EAAC,sBAAhB;AAAA,sBACGqC,MAAM,CAACS,MAAP,CAAc9C;AADjB;AAAA;AAAA;AAAA;AAAA,kBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBF,eAsCE,QAAC,MAAD;AACE,UAAA,QAAQ,EAAEqC,MAAM,CAACU,YADnB;AAEE,UAAA,OAAO,EAAC,SAFV;AAGE,UAAA,IAAI,EAAC,QAHP;AAIE,UAAA,SAAS,EAAC,MAJZ;AAKE,UAAA,KAAK,MALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtCF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AA2DD","sourcesContent":["import Head from \"next/head\";\r\nimport Router from \"next/router\";\r\nimport { Container, Row, Col, Form, Button, Image } from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { axiosGeneral } from \"../helpers/global\";\r\nimport { setAccessToken, setUser, setLoading } from \"../store/actionCreator\";\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nconst FormSchema = Yup.object().shape({\r\n  password: Yup.string().required(\"* Password tidak boleh kosong\"),\r\n});\r\n\r\nconst FormSchemaPassword = Yup.object().shape({\r\n  password: Yup.string().required(\"* Password tidak boleh kosong\"),\r\n  ulangi_password: Yup.string().required(\"*Ulangi Password tidak boleh kosong\"),\r\n  ulangi_password: Yup.string().oneOf(\r\n    [Yup.ref(\"password\"), null],\r\n    \"Password tidak sama!\"\r\n  ),\r\n});\r\n\r\nexport default function Home() {\r\n  const dispatch = useDispatch();\r\n  const accessToken = useSelector((state) => state.accessToken);\r\n  const { addToast } = useToasts();\r\n\r\n  useEffect(() => {\r\n    if (accessToken) {\r\n      Router.replace(\"/dashboard\");\r\n    }\r\n\r\n    const url = new URLSearchParams(location.search);\r\n    if (url.get(\"token\") != null) {\r\n      setTokenVerify(url.get(\"token\").toString());\r\n      setIsNewPassword(true);\r\n    }\r\n  }, []);\r\n\r\n  const doLogin = async (values) => {\r\n    try {\r\n      dispatch(setLoading(true));\r\n      const body = {\r\n        email: values.email,\r\n        password: values.password,\r\n        app_id: \"admin-panel\",\r\n      };\r\n      const response = await axiosGeneral.post(\"/login\", body);\r\n      const { status, data } = response;\r\n      // console.log(data);\r\n      if (status === 200) {\r\n        setTokenTemp(data.data.temp_token);\r\n        dispatch(setLoading(false));\r\n        setIsOtp(true);\r\n        setOTP(\"\");\r\n      }\r\n    } catch (error) {\r\n      dispatch(setLoading(false));\r\n      addToast(error.response.data.message, { appearance: \"error\" });\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    validationSchema: FormSchema,\r\n    onSubmit: (values) => doLogin(values),\r\n  });\r\n\r\n  const formikPassword = useFormik({\r\n    initialValues: {\r\n      password: \"\",\r\n      ulangi_password: \"\",\r\n    },\r\n    validationSchema: FormSchemaPassword,\r\n    enableReinitialize: false,\r\n    onSubmit: (values) => doChangePassword(values),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Login - LISTRIK</title>\r\n      </Head>\r\n      <div className=\"bg-green-700\">\r\n        <h1>Listrik</h1>\r\n        <h3 className=\"font-semibold\">Masuk</h3>\r\n        <form onSubmit={formik.handleSubmit} method=\"POST\">\r\n          <Form.Group className=\"mt-5\">\r\n            <Form.Label>Username</Form.Label>\r\n            <Form.Control\r\n              className=\"custom-input\"\r\n              type=\"text\"\r\n              autoComplete=\"false\"\r\n              name=\"email\"\r\n              onChange={formik.handleChange}\r\n              value={formik.values.email}\r\n            />\r\n            {formik.errors.email && (\r\n              <span className=\"text-xs text-red-500\">\r\n                {formik.errors.email}\r\n              </span>\r\n            )}\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n            <Form.Control\r\n              className=\"custom-input\"\r\n              type=\"password\"\r\n              autoComplete=\"true\"\r\n              name=\"password\"\r\n              onChange={formik.handleChange}\r\n              value={formik.values.password}\r\n            />\r\n            {formik.errors.password && (\r\n              <span className=\"text-xs text-red-500\">\r\n                {formik.errors.password}\r\n              </span>\r\n            )}\r\n          </Form.Group>\r\n          {/* <Link href=\"/forgot-password\">\r\n                          <span className=\"forgot-password-link\">\r\n                            Lupa Password?\r\n                          </span>\r\n                        </Link> */}\r\n          <Button\r\n            disabled={formik.isSubmitting}\r\n            variant=\"warning\"\r\n            type=\"submit\"\r\n            className=\"mt-4\"\r\n            block\r\n          >\r\n            Login\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}